flows:
  # pattern_chitchat:
  #   description: Conversation repair flow for off-topic interactions that won't disrupt the main conversation. should not respond to greetings or anything else for which there is a flow defined
  #   name: pattern chitchat
  #   steps:
  #     - action: utter_free_chitchat_response
      
  pattern_session_start:
    description: Flow for starting the conversation
    name: pattern session start   
    nlu_trigger:
      - intent: session_start
    steps:
      - action: utter_greet_user
      - action: utter_inform_services        

  pattern_completed:
    description: Flow that asks if the user needs more help after completing their initiated use cases
    name: pattern completed
    steps:
     - action: action_restart
      

  pattern_cannot_handle:
    description: |
      Conversation repair flow for addressing failed command generation scenarios
    name: pattern cannot handle
    steps:
      - noop: true
        next:
          # chitchat fallback
          - if: "'{{context.reason}}' = 'cannot_handle_chitchat'"
            then:
              - action: utter_cannot_handle
                next: "END"
          # fallback for things that are not supported
          - if: "'{{context.reason}}' = 'cannot_handle_not_supported'"
            then:
              - action: utter_cannot_handle
                next: END
          # default
          - else:
              - action: action_ask_rephrase 
                next: END

  # pattern_collect_information:
  #     description: Flow for collecting information from users
  #     name: pattern collect information
  #     persisted_slots:
  #     - consecutive_silence_timeouts      
  #     steps: 
  #       - id: start
  #         action: action_forget_reminders  
  #       -  action: action_run_slot_rejections
  #       - action: validate_{{context.collect}}
  #       - action: action_set_reminder
  #         next:
  #           - if: "slots.{{context.collect}} is not null"
  #             then: END
  #           - else: ask_collect

  #       - id: ask_collect                            
  #         noop: true
  #         next:
  #           - if: "slots.consecutive_silence_timeouts = 0.0"
  #             then:
  #               - set_slots:
  #                   - consecutive_silence_timeouts: 1.0
  #               - action: "{{context.utter}}"
  #               # - action: action_repeat_bot_messages
  #                 next: collect
  #           - if: "slots.consecutive_silence_timeouts = 1.0"
  #             then:
  #               - set_slots:
  #                   - consecutive_silence_timeouts: 2.0
  #               - action: utter_ask_still_there
  #                 next: collect
  #           - if: "slots.consecutive_silence_timeouts > 1.0"
  #             then:
  #               - action: utter_inform_hangup
  #               - action: action_hangup
  #                 next: END
  #           - else: END        
  #       - id: collect
  #         action: "{{context.collect_action}}"
  #       - action: action_listen
  #         next: start
  # pattern_collect_information:
  #   description: Flow for collecting information from users
  #   name: pattern collect information
  #   persisted_slots:
  #     - consecutive_silence_timeouts      
  #   steps:
  #     - id: "top"
  #       action: action_forget_reminders                   # clear any previously scheduled reminders
  #     - action: action_run_slot_rejections                # check if the requested slot was already set
  #     - action: validate_{{context.collect}}
  #     - action: action_set_reminder                       # schedule a new reminder
  #       next:
  #         - if: "slots.{{context.collect}} is not null"
  #           then: END
  #         - else: ask_collect

  #     - id: ask_collect                            
  #       noop: true
  #       next:
  #         - if: "slots.consecutive_silence_timeouts = 0.0"
  #           then:
  #             - set_slots:
  #                 - consecutive_silence_timeouts: 1.0
  #             - action: "{{context.utter}}"
  #             # - action: action_repeat_bot_messages
  #               next: collect
  #         - if: "slots.consecutive_silence_timeouts = 1.0"
  #           then:
  #             - set_slots:
  #                 - consecutive_silence_timeouts: 2.0
  #             - action: utter_ask_still_there
  #               next: collect
  #         - if: "slots.consecutive_silence_timeouts > 1.0"
  #           then:
  #             - action: utter_inform_hangup
  #             - action: action_hangup
  #               next: END
  #         - else: END         
  #     - id: collect
  #       action: "{{context.collect_action}}"
  #     - action: action_listen
  #       next: top          # listen for next user response

